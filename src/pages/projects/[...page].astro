---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import ProjectCard from "@/components/ProjectCard.astro";
import Pagination from "@/components/Pagination.astro";
import { SITE } from "@/config";

export const getStaticPaths = (async ({ paginate }) => {
  const projects = await getCollection("projects", ({ data }) => !data.draft);
  const sortedProjects = projects.sort((a, b) => b.data.pubDateTime.valueOf() - a.data.pubDateTime.valueOf());
  
  // Group projects by category
  const projectsByCategory = sortedProjects.reduce((acc, project) => {
    const category = project.data.category || "Other";
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(project);
    return acc;
  }, {} as Record<string, typeof sortedProjects>);
  
  // Flatten the grouped projects for pagination
  const flattenedProjects = Object.values(projectsByCategory).flat();
  
  return paginate(flattenedProjects, { pageSize: SITE.postPerPage });
}) satisfies GetStaticPaths;

const { page } = Astro.props;

// Group the current page's projects by category
const projectsByCategory = page.data.reduce((acc, project) => {
  const category = project.data.category || "Uncategorized";
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(project);
  return acc;
}, {} as Record<string, typeof page.data>);

// Get all unique categories from the current page
const categories = Object.keys(projectsByCategory).sort();
---

<Layout title={`Projects | ${SITE.title}`}>
  <Header />
  <Main pageTitle="Projects" pageDesc="Some personal projects, notable work and media apparitions">
    {categories.map(category => (
      <div class="mb-12">
        <h2 class="text-2xl font-bold mb-6 text-accent">{category}</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {projectsByCategory[category].map(project => <ProjectCard {...project} />)}
        </div>
      </div>
    ))}
  </Main>

  <Pagination {page} />

  <Footer noMarginTop={page.lastPage > 1} />
</Layout>
